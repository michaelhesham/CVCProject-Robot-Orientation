import cv2
import numpy as np
from array import *
import pyzbar.pyzbar as pyzbar

frameWidth = 640
frameHeight = 480
cap = cv2.VideoCapture(0)
cap.set(3, frameWidth)
cap.set(4, frameHeight)

def empty(a):
    pass

cv2.namedWindow("Parameters")
cv2.resizeWindow("Parameters",640,240)
cv2.createTrackbar("Threshold1","Parameters",23,255,empty)
cv2.createTrackbar("Threshold2","Parameters",20,255,empty)
cv2.createTrackbar("Area","Parameters",5000,30000,empty)

#function to get data stored in QRcode
def getData():
    _, frame = cap.read()

    decodedObjects = pyzbar.decode(frame)
    for obj in decodedObjects:
        Data = obj.data
        return Data

#function to put 4 images in one image 
def stackImages(scale,imgArray):
    rows = len(imgArray)
    cols = len(imgArray[0])
    rowsAvailable = isinstance(imgArray[0], list)
    width = imgArray[0][0].shape[1]
    height = imgArray[0][0].shape[0]
    if rowsAvailable:
        for x in range ( 0, rows):
            for y in range(0, cols):
                if imgArray[x][y].shape[:2] == imgArray[0][0].shape [:2]:
                    imgArray[x][y] = cv2.resize(imgArray[x][y], (0, 0), None, scale, scale)
                else:
                    imgArray[x][y] = cv2.resize(imgArray[x][y], (imgArray[0][0].shape[1], imgArray[0][0].shape[0]), None, scale, scale)
                if len(imgArray[x][y].shape) == 2: imgArray[x][y]= cv2.cvtColor( imgArray[x][y], cv2.COLOR_GRAY2BGR)
        imageBlank = np.zeros((height, width, 3), np.uint8)
        hor = [imageBlank]*rows
        hor_con = [imageBlank]*rows
        for x in range(0, rows):
            hor[x] = np.hstack(imgArray[x])
        ver = np.vstack(hor)
    else:
        for x in range(0, rows):
            if imgArray[x].shape[:2] == imgArray[0].shape[:2]:
                imgArray[x] = cv2.resize(imgArray[x], (0, 0), None, scale, scale)
            else:
                imgArray[x] = cv2.resize(imgArray[x], (imgArray[0].shape[1], imgArray[0].shape[0]), None,scale, scale)
            if len(imgArray[x].shape) == 2: imgArray[x] = cv2.cvtColor(imgArray[x], cv2.COLOR_GRAY2BGR)
        hor= np.hstack(imgArray)
        ver = hor
    return ver

#function to get orientation of robot
def getOrientation(img,imgContour):
    contours, hierarchy = cv2.findContours(img, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)
    
    x_array = []
    y_array = []
    Xcenter = 0
    Ycenter = 0
    squares_in_second_half = 0
    squares_in_lower_half = 0
                    
    for cnt in contours:
        area = cv2.contourArea(cnt)
        areaMin = cv2.getTrackbarPos("Area", "Parameters")
                
        if  areaMin + 500 > area > areaMin - 500:
            peri = cv2.arcLength(cnt, True)
            approx = cv2.approxPolyDP(cnt, 0.02 * peri, True)
            x , y , w, h = cv2.boundingRect(approx)

            if len(approx) == 4:
                x_array.append(x)
                y_array.append(y)
                
                cv2.rectangle(imgContour, (x , y ), (x + w , y + h ), (0, 255, 0), 5)

                cv2.putText(imgContour, "Points: " + str(len(approx)), (x + w + 20, y + 20), cv2.FONT_HERSHEY_COMPLEX, .7, (0, 255, 0), 2)
                cv2.putText(imgContour, "Area: " + str(int(area)), (x + w + 20, y + 45), cv2.FONT_HERSHEY_COMPLEX, 0.7, (0, 255, 0), 2)
                cv2.putText(imgContour, "X: " + str(int(x)), (x + w + 20, y + 80), cv2.FONT_HERSHEY_COMPLEX, 0.7, (0, 255, 0), 2)
                cv2.putText(imgContour, "Y: " + str(int(y)), (x + w + 100, y + 80), cv2.FONT_HERSHEY_COMPLEX, 0.7, (0  , 255, 0), 2)
        
        elif area > areaMin + 30000:
            peri = cv2.arcLength(cnt, True)
            approx = cv2.approxPolyDP(cnt, 0.02 * peri, True)
            x , y , w, h = cv2.boundingRect(approx)

            if len(approx) == 4:
                Xcenter = x + w/2
                Ycenter = y + h/2
                
                cv2.rectangle(imgContour, (x , y ), (x + w , y + h ), (0, 255, 0), 5)
                cv2.putText(imgContour, "Points: " + str(len(approx)), (x + w + 20, y + 20), cv2.FONT_HERSHEY_COMPLEX, 0.7, (0, 255, 0), 2)
                cv2.putText(imgContour, "Area: " + str(int(area)), (x + w + 20, y + 45), cv2.FONT_HERSHEY_COMPLEX, 0.7, (0, 255, 0), 2)
                cv2.putText(imgContour, "X: " + str(int(x)), (x + w + 20, y + 80), cv2.FONT_HERSHEY_COMPLEX, 0.7, (0, 255, 0), 2)
                cv2.putText(imgContour, "Y: " + str(int(y)), (x + w + 100, y + 80), cv2.FONT_HERSHEY_COMPLEX, 0.7, (0  , 255, 0), 2)
                
    if len(x_array) == 3:
        for i in range(3):
            if x_array[i] > Xcenter:
                squares_in_second_half = squares_in_second_half + 1
        for i in range(3):
            if y_array[i] > Ycenter:
                squares_in_lower_half = squares_in_lower_half + 1     
        if squares_in_second_half == 2:
            if squares_in_lower_half == 2:
                return "South"
            else:
                return "West"
        else:
            if squares_in_lower_half == 2:
                return "East"
            else:
                return "North"
while True:
    #read image from camera and make a copy
    success, img = cap.read()
    imgContour = img.copy()
    
    #reduce image noise and reduce detail
    imgBlur = cv2.GaussianBlur(img, (7, 7), 1)
    
    #change to gray image
    imgGray = cv2.cvtColor(imgBlur, cv2.COLOR_BGR2GRAY)
    
    #max and min threshold value
    threshold1 = cv2.getTrackbarPos("Threshold1", "Parameters")
    threshold2 = cv2.getTrackbarPos("Threshold2", "Parameters")
    
    #canny edge detection
    imgCanny = cv2.Canny(imgGray,threshold1,threshold2)
    kernel = np.ones((5, 5))
    imgDil = cv2.dilate(imgCanny, kernel, iterations=1)
    
    #read orientation
    robotOrientation = getOrientation(imgDil,imgContour)
    print(robotOrientation)
    
    #rad data
    location = getData()
    print(location)
    
    #show 4 images
    imgStack = stackImages(0.5,([img,imgContour], [imgDil,imgCanny]))
    cv2.imshow("Result", imgStack)
    
    #close window if 'q' key is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
